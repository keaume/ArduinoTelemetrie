/* WIFI OKKKKKKK */





/* ----------------------------------------- */
/* -------- Written by Antoine Toenz ------- */
/* ----------------------------------------- */


 /*For more details see: http://yaab-arduino.blogspot.com/p/wifiesp-example-connect.html
*/


/* ----------------------------------------- */
/* -----      Librairies utilisées     ----- */
/* ----------------------------------------- */

#include "WiFiEsp.h"
// Emulate Serial1 on pins 10/11 if not present
#ifndef HAVE_HWSERIAL1
#include "SoftwareSerial.h"
SoftwareSerial Serial1(10, 11); // RX, TX
#endif

/* ----------------------------------------- */
/* --- Définition des variables globales --- */
/* ----------------------------------------- */

char ssid[] = "marmott energies";                // your network SSID (name)
char pass[] = "79FC371C";                       // your network password
int status = WL_IDLE_STATUS;                   // the Wifi radio's status
String apiKey = "BSKYZ67DV68B0B9J";           // API Thingspeak channel
int ledPin = 13;
int lm35Pin = 0;


void setup()
{
  // initialize the digital pin as an output.
  pinMode(ledPin, OUTPUT);
  // initialize serial for debugging
  Serial.begin(115200);
  delay(500);
  // initialize serial for ESP module
  Serial1.begin(115200);
  delay(500);
  // initialize ESP module
  WiFi.init(&Serial1);
  delay(500);

  // check for the presence of the shield
  if (WiFi.status() == WL_NO_SHIELD) {
    Serial.println("WiFi shield not present");
    delay(500);
    // don't continue
    while (true);
  }

  // attempt to connect to WiFi network
  while ( status != WL_CONNECTED) {
    Serial.print("Attempting to connect to WPA SSID: ");
    Serial.println(ssid);
    // Connect to WPA/WPA2 network
    delay(500);
    status = WiFi.begin(ssid, pass);
    delay(500);
    
  }

  Serial.println("You're connected to the network");
}

void loop()
{
  // print the network connection information every 30 seconds
  /*Serial.println();
  delay(500);
  */
  printCurrentNet();
  printWifiData();
  printTempData();
  delay(10000);
}

void printTempData()
{
    // faire clignoter la LED on board
  digitalWrite(ledPin, HIGH);   
  digitalWrite(ledPin, LOW);

  // read the value from LM35.
  // read 10 values for averaging.
  int val = 0;
  for(int i = 0; i < 10; i++) {
      val += analogRead(lm35Pin);   
      delay(500);
  }
  // convert to temp:
  // temp value is in 0-1023 range
  // LM35 outputs 10mV/degree C. ie, 1 Volt => 100 degrees C
  // So Temp = (avg_val/1023)*5 Volts * 100 degrees/Volt
  float temp = val*50.0f/1023.0f;

  // convert to string
  char buf[16];
  String strTemp = dtostrf(temp, 4, 1, buf);
  
  Serial.println(strTemp);
  

  // TCP connection (TCP>UDP)
  String cmd = "AT+CIPSTART=\"TCP\",\"";
  // Envoie au serveur de thingspeak
  cmd += "184.106.153.149"; // api.thingspeak.com
  Serial.println(cmd);
  // Port 80
  cmd += "\",80";
  delay(100);
  Serial1.println(cmd);
  delay(100);
   
  if(Serial1.find("Error")){
    Serial.println("AT+CIPSTART error");
    return;
  }

  
  // prepare GET string
  String getStr = "GET /update?api_key=";
  getStr += apiKey;
  getStr +="&field1=";
  getStr += String(strTemp);
  getStr += "\r\n\r\n";

  // send data length
  cmd = "AT+CIPSEND=";
  cmd += String(getStr.length());
  Serial1.println(cmd);
  
  if(Serial1.available())
  {
    while(Serial1.available())
    {
      delay(100);
      char q = Serial1.read();
      Serial.write(q);
      delay(100);
     }
   }
   
   if(Serial.available())
   {
     delay(1000);
     String command="";
     
     while(Serial.available())
     {
      delay(100);
       command+=(char)Serial.read();
       delay(100);
      }
      Serial1.println(command);
      delay(100);
     }


// Permet de pouvoir changer de API KEY

 if(Serial1.find(">"))
 { 
    Serial1.print(getStr);
  }
else
{ 
    Serial1.println("AT+CIPCLOSE");
    // alert user
    Serial1.print(getStr);
    delay(100);
    Serial.println("AT+CIPCLOSE");
    delay(100);
}
 

 /*   while (esp8266.available())
    {
         char c = esp8266.read();
         Serial.write(esp8266.read());
         if (c == '\r') Serial.print('\n');
    }
    */


/*if (esp8266.println("AT+CIPCLOSE"))
{     
    delay(100);
    esp8266.print(getStr);
    delay(100);
}
*/
  
  // thingspeak needs 15 sec delay between updates
  delay(16500);
  // delay(16000);  
}



void printWifiData()
{
  // print your WiFi shield's IP address
  IPAddress ip = WiFi.localIP();
  delay(1000);
  Serial.print("IP Address: ");
  delay(2000);
  Serial.println(ip);
  delay(1000);

  // print your MAC address
  byte mac[6];
  delay(1000);
  WiFi.macAddress(mac);
  delay(1000);
  char buf[20];
  sprintf(buf, "%02X:%02X:%02X:%02X:%02X:%02X", mac[5], mac[4], mac[3], mac[2], mac[1], mac[0]);
  delay(1000);
  Serial.print("MAC address: ");
  delay(2000);
  Serial.println(buf);
  delay(1000);
}

void printCurrentNet()
{
  // print the SSID of the network you're attached to
  Serial.print("SSID: ");
  delay(2000);
  Serial.println(WiFi.SSID());
  delay(1000);

  // print the MAC address of the router you're attached to
  byte bssid[6];
  delay(1000);
  WiFi.BSSID(bssid);
  delay(1000);
  char buf[20];
  sprintf(buf, "%02X:%02X:%02X:%02X:%02X:%02X", bssid[5], bssid[4], bssid[3], bssid[2], bssid[1], bssid[0]);
  delay(1000);
  Serial.print("BSSID: ");
  delay(1000);
  Serial.println(buf);
  delay(1000);

  // print the received signal strength
  long rssi = WiFi.RSSI();
  delay(1000);
  Serial.print("Signal strength (RSSI): ");
  delay(1000);
  Serial.println(rssi);
  delay(1000);
}
